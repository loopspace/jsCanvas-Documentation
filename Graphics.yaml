id: graphics
name: Graphics
subtitle: Drawing Shapes, Styles and Positioning
ordering:
    - Overview
    - Drawing
    - Transform
    - Advanced Transform
    - Style
    - Text Metrics
    - Transform Management
    - Style Management
    - Constants
    - Variables
functions:

#---------------------------------
# jsCanvas Overview
#---------------------------------
- id: jscanvasOverview
  category: overview
  description: |
    When you begin a new project in jsCanvas you'll notice that it consists of a tab called `Main` and some template code. Your project can consist of several tabs, the initial one is always called `Main`. If you add more tabs they will be listed across the top.
    
        function setup() {
            print("hello world");
        }

        function draw() {
            background(40,40,50);
            fill(150,200,30);
            stroke(200,30,150);
            strokeWidth(10);
            rect(20,20,100,100);
        }
    
    
    This is the framework that your project will use to run. There are two functions defined for you initially: `setup()` and `draw()`.
    
    
    `setup()` and `draw()` are executed by jsCanvas when you press the execute button to run your project. The `setup()` function is called once, at the start, and then the `draw()` function is called repeatedly. In `setup()` jsCanvas expects you to set up your initial program state, and in `draw()` you can tell jsCanvas to render graphics onto the screen, update your program state over time, and so on.
    
    
    In the next two sections we will cover these functions in detail.
  group: Overview    
  name: How jsCanvas Draws
  related: [drawOverview, setupOverview]
#---------------------------------  

#---------------------------------
# Drawing Overview
#---------------------------------    
- id: drawOverview
  category: overview
  description: |
    When you press the execute button, the `draw()` function is repeatedly executed by jsCanvas.
    
    
        function draw() {
            // Set the background colour to blueish
            background(100,120,180);
            
            // Set the fill colour to red
            fill(255,0,0);
            
            // Set a wide outline
            strokeWidth(5);
            
            // Set the outline colour to white
            stroke(255);
            
            // Draw a red circle with a white outline
            // In the center of the screen
            ellipse( WIDTH/2, HEIGHT/2, 200 );
        }
        
    Note that the above code will run many times every second. That is, you are telling jsCanvas to paint the background blue and draw a red circle with a white outline several times per second, from scratch. It does this so that you can create smooth motion by changing your program state over time, and updating your drawing code to reflect the new state. For example, you might make the circle bounce on the ground by changing its Y-position (the second parameter to `ellipse()`) every frame.
  group: Overview    
  name: The draw() function
  related: [setupOverview]
#---------------------------------    
  
#---------------------------------
# Setup Overview
#---------------------------------    
- id: setupOverview
  category: overview
  description: |
    When you press the execute button jsCanvas will call the `setup()` function once, before it begins calling the `draw()` function. In here you can perform any once-off computations, set up program state, set the display mode, and do things that you don't need to do every frame. For example, the `setup()` function below creates a global variable controlled by a slider. This variable is then used in the `draw()` function to control the Y-position of a circle.
    
        function setup() {
            displayMode(STANDARD);
            parameter.number("Y Position", 'yposition', 0, 
                      HEIGHT, HEIGHT/2,1);
        }
        
        function draw() {
            background(0);
            fill(255,0,0);
            ellipse( WIDTH/2, 
                     parameters.yposition, 
                     200 );
        }
        
  group: Overview    
  name: The setup() function
  related: [drawOverview]
#---------------------------------     
   

#---------------------------------
# background()
#---------------------------------                
- id: background
  category: function
  description: >
    Clears the background to the specified colour. You should generally
    call this at the start of your `draw()` function in order to clear the
    contents of the previous frame.
  examples:
  - example: |
      function draw() {
        // Dark blueish background
        background(0, 50, 70);
              
        // Do some drawing
      }
  group: Drawing    
  name: background( colour )
  parameters:
  - description: a colour specification, see the `colour` type for details.
    name: colour
  related: [colour, backingMode]
  syntax: |
    background( colour );
#---------------------------------

#---------------------------------
# ellipse()
#---------------------------------       
- id: ellipse
  category: function
  description: >
    Draws an ellipse centered at `x`, `y` with horizontal and vertical
    dimensions specified by `width` and `height`. The `ellipseMode()`
    function sets how these parameters are interpreted. Use `fill()` to set
    the colour of an ellipse and `stroke()` to set its outline colour.
    
    
    If only the `width` is specified, this is treated as the ellipse
    `diameter` (or `radius`, if `ellipseMode( RADIUS )` is used) and
    the result is a circle.

    The interpretation
    of an ellipse's `x`, `y`, `width` and `height` parameters can be specified
    using the `ellipseMode()` function. `ellipseMode()` is set to `CENTER`
    by default.
  group: Drawing    
  name: ellipse( x, y, width, height )
  parameters:
  - description: x-coordinate of the ellipse
    name: x
  - description: y-coordinate of the ellipse
    name: y
  - description: width of the ellipse
    name: width
  - description: height of the ellipse
    name: height
  related: [ellipseMode, fill, stroke]
  syntax: |
    ellipse( x, y, diameter );
    ellipse( x, y, width, height );
#---------------------------------

#---------------------------------
# circle()
#---------------------------------
- id: circle
  category: function
  description: >
    Draws a circle centered at `x`, `y` with radius `radius`. The `ellipseMode()`
    function sets how these parameters are interpreted. Use `fill()` to set
    the colour of an circle and `stroke()` to set its outline colour.

    The interpretation
    of a circles `x`, `y`, and `radius` parameters can be specified
    using the `ellipseMode()` function. `ellipseMode()` is set to `CENTER`
    by default.

  group: Drawing    
  name: circle( x, y, radius )
  parameters:
  - description: x-coordinate of the circle
    name: x
  - description: y-coordinate of the circle
    name: y
  - description: radius of the circle
    name: radius
  related: [ellipse, ellipseMode, fill, stroke]
  syntax: |
    circle( x, y, radius );
#---------------------------------

#---------------------------------
# rect()
#---------------------------------       
- id: rect
  category: function
  description: >
    Draws a rectangle with its lower-left corner positioned at `x`,
    `y` and sized at `width`, `height`. Use `fill()` to set the colour
    of a rectangle and `stroke()` to set the outline colour. 
    
    
    The interpretation
    of a rectangle's `x`, `y`, `width` and `height` parameters can be specified
    using the `rectMode()` function. `rectMode()` is set to `CORNER`
    by default.
  group: Drawing    
  name: rect( x, y, width, height )
  parameters:
  - description: x-coordinate of the lower-left corner
    name: x
  - description: y-coordinate of the lower-left corner
    name: y
  - description: width of the rectangle
    name: width
  - description: height of the rectangle
    name: height
  related: [rectMode, fill, stroke]
  syntax: rect( x, y, width, height );
   
#---------------------------------

#---------------------------------
# polygon()
#---------------------------------       
- id: polygon
  category: function
  description: >
    Draws a polygon with the specified vertices. Use `fill()` to set the colour
    of a polygon and `stroke()` to set the outline colour. 
  examples:
  - example: |
      background(100, 120, 160);
      polygon(200,100,200,200,300,100);
      
  group: Drawing    
  name: polygon( vertices )
  parameters:
  - description: a list of vertices of the polygon, either as `Vec2`s
      or as `x` and `y` coordinates.
    name: vertices
  related: [polyline, fill, stroke]
  syntax: polygon( vertices );
   
#---------------------------------

#---------------------------------
# polyline()
#---------------------------------       
- id: polyline
  category: function
  description: >
    Draws a series of lines through with the specified points. Use `fill()` to set the colour
    of a polyline and `stroke()` to set the outline colour.

    The difference between a `polyline` and a `polygon` is that a
    `polygon` is a *closed* shape, whereas a `polyline` does not
    automatically join up. 
  examples:
  - example: |
      background(100, 120, 160);
      polyline(200,100,200,200,300,100);
      
  group: Drawing    
  name: polyline( vertices )
  parameters:
  - description: a list of vertices of the polyline, either as `Vec2`s
      or as `x` and `y` coordinates.
    name: vertices
  related: [polygon, fill, stroke]
  syntax: polyline( vertices );
   
#---------------------------------


#---------------------------------
# text()
#---------------------------------               
- id: text
  category: function
  description: >
    Draws text at the given `x`, `y` location. You can set
    the font used by `text()` with the `font()` function. Text appearance
    can be further configured by using the `fontSize()` and `fill()` functions.
  

    You can change the alignment and wrapping of text by using `textAlign()` and
    `textWrapWidth()`. If `textWrapWidth()` is set to 0 (the default)
    text will be drawn on one line. If `textWrapWidth()` is set to a value
    greater than 0 the text will word-wrap if it exceeds the width specified by
    `textWrapWidth()`
    

    By default the x and y parameters set the
    location of the center of the text, the origin mode can be set
    using the `textMode()` and `textValign()`
    functions. Text colour can be changed with the `fill()` function.
    

    If you need to get the dimensions of a string in the current style, see the 
    `textSize` function documentation.
  examples:
  - example: |
      background(100, 120, 160);
      font("Georgia");
      fill(255);
      fontSize(20);
      textWrapWidth(70);
      text("Hello World!", WIDTH/2, HEIGHT/2);
    image: media/text_ex1.png
  group: Drawing    
  name: text( string, x, y )
  parameters:
  - description: the text string that you would like to draw onto the screen
    name: string
  - description: x-coordinate of the center of the text (this can be changed with
      `textMode`)
    name: x
  - description: y-coordinate of the center of the text (this can be changed with
      `textMode`)
    name: y
  related: [font, fill, fontSize, textMode, textAlign, textValign, textWrapWidth, textSize]
  syntax: text( string, x, y );
#---------------------------------

#---------------------------------
# line()
#---------------------------------      
- id: line
  category: function
  description: >
    Draws a line between the two points specified by `x1,y1` and
    `x2,y2` (either or both can specified by a `Vec2`). A line's colour can be set with the `stroke()` function and
    its width can be set with the `strokeWidth()` function. A line's cap style
    can be changed with the `lineCapMode()` function.
  examples:
  - example: |
      function draw() {
          background(128);
          stroke(255);
          line(10, 10, 80, 80);
      }
    image: media/line_ex1.png
  group: Drawing    
  name: line( x1, y1, x2, y2 )
  parameters:
  - description: x-coordinate of the first point
    name: x1
  - description: y-coordinate of the first point
    name: y1
  - description: x-coordinate of the second point
    name: x2
  - description: y-coordinate of the second point
    name: y2
  related: [lineCapMode, stroke, strokeWidth, smooth, noSmooth]
  syntax: line( x1, y1, x2, y2 );
#---------------------------------

#---------------------------------
# arc()
#---------------------------------
- id: arc
  category: function
  description: >
    Draws an arc as specified by the parameters.  It starts at the
    point `x,y` and has radius `radius`.  The span of the arc is
    specified by the angles `startAngle` and `endAngle`.  The first is the initial angle.  If `arcMode` is set to
    `ABSOLUTE` then `endAngle` is the final angle, otherwise it is the angle
    subtended by the arc (sometimes referred to as the *delta
    angle*).  The final argument, a boolean, determines whether the arc is drawn
    anti-clockwise (`true` or blank) or clockwise (`false`).

    Angles are specified in degrees.
  examples:
  - example: |
      function draw() {
          background(128);
          stroke(255);
          arc(200, 10, 50, 20, 180);
      }
    image: media/arc_ex1.png
  group: Drawing    
  name: arc( x, y, radius, startAngle, endAngle, clockwise )
  parameters:
  - description: x-coordinate of the start of the arc
    name: x
  - description: y-coordinate of the start of the arc
    name: y
  - description: radius of the arc
    name: radius
  - description: starting angle of the arc
    name: startAngle
  - description: ending or delta angle of the arc
    name: endAngle
  - description: boolean to decide whether the arc is drawn clockwise
      or anti-clockwise
    name: clockwise
  related: [lineCapMode, stroke, strokeWidth]
  syntax: arc( x, y, radius, startAngle, endAngle, clockwise );
#---------------------------------

#---------------------------------
# bezier()
#---------------------------------
- id: bezier
  category: function
  description: >
    Draws a cubic bezier as specified by the parameters.  It starts at the
    point `x1,y1`, ends at `x4,y4`, and has control points `x2,y2` and
    `x3,y3`.  The points can be `Vec2`s.

    If `bezierMode` is `ABSOLUTE` then the control points are the
    actual points, if `bezierMode` is `RELATIVE` then the control
    points are relative to the respective endpoints.
    
  examples:
  - example: |
      function draw() {
          background(128);
          stroke(255);
          bezier(200, 100, 200, 200, 300, 100, 300, 200 );
      }
    image: media/arc_ex1.png
  group: Drawing    
  name: bezier( x1, y1, x2, y2, x3, y3, x4, y4 );
  parameters:
  - description: x-coordinate of the start of the curve
    name: x1
  - description: y-coordinate of the start of the curve
    name: y1
  - description: x-coordinate of the first control point
    name: x2
  - description: y-coordinate of the first control point
    name: y2
  - description: x-coordinate of the second control point
    name: x3
  - description: y-coordinate of the second control point
    name: y3
  - description: x-coordinate of the end of the curve
    name: x4
  - description: y-coordinate of the end of the curve
    name: y4
  related: [lineCapMode, stroke, strokeWidth]
  syntax: bezier( x1, y1, x2, y2, x3, y3, x4, y4 );
#---------------------------------


#---------------------------------
# translate()
#---------------------------------    
- id: translate
  category: function
  description: Translates all subsequent drawing operations by the specified
    `x` and `y` values. Translations are cumulative, so a call to `translate(
    50, 0 )` followed by a call to `translate( 10, 10 )` will translate
    all subsequent drawing operations by `60, 10`.
  group: Transform    
  name: translate( x, y )
  parameters:
  - description: amount of horizontal translation, in pixels
    name: x
  - description: amount of vertical translation, in pixels
    name: y
  related: [rotate, scale, pushMatrix, popMatrix, resetMatrix]
  syntax: |
    translate( x, y );
#---------------------------------

#---------------------------------
# rotate()
#---------------------------------        
- category: function
  description: >
    Specifies an amount of rotation (in degrees) to apply to all subsequent
    drawing. All subsequent drawing functions will be rotated by angle value specified
    in this function. Rotations are cumulative, so calling `rotate(30)` followed
    by `rotate(20)` has the same effect as `rotate(50)`.
  

    `rotate()` can also be called with a point, defined by the `x`, and `y` parameters.
    This allows rotation to occur about an arbitrary point.
    
  group: Transform
  id: rotate
  name: rotate( angle )
  parameters:
  - description: amount of rotation in degrees
    name: angle
  - description: float, x value for the centre of the rotation
    name: x
  - description: float, y value for the centre of the rotation
    name: y
  related:
  - translate
  - scale
  - pushMatrix
  - popMatrix
  syntax: |
    rotate( angle );
    rotate( angle, x, y );
    
#---------------------------------

#---------------------------------
# scale()
#---------------------------------        
- category: function
  description: Specifies an amount of scale to apply to all drawing. All subsequent
    drawing functions will be scaled by the x and y values specified in this function.
    Scale values are specified as a scalar multipliers, for example, scale(2.0,
    2.0) will double the `x` and `y` dimensions of subsequent drawing
    commands. `scale()` is cumulative, so calling `scale(0.5)` followed
    by `scale(0.5)` will scale all subsequent drawing operations by 0.25 (i.e.,
    one quarter of their original size).
  group: Transform
  id: scale
  name: scale( x, y )
  parameters:
  - description: uniform amount of scale to apply horizontally and vertically. Applies
      on both axis, x and y.
    name: amount
  - description: amount of scale to apply on the x axis (horizontal)
    name: x
  - description: amount of scale to apply on the y axis (vertical)
    name: y
  related:
  - rotate
  - translate
  - pushMatrix
  - popMatrix
  syntax: |
    scale( amount );
    scale( x, y );
#---------------------------------


#---------------------------------
# composeTransformation()
#---------------------------------                
- category: function
  description: Composes the transformation specified by `transformation` with the current
    model transformation. The current model transformation represents the world transform, this
    is the same transformation used in `pushTransformation` and `popTransformation` operations.
  group: Advanced Transform
  id: composeTransformation
  name: composeTransformation( transformation )
  parameters:
  - description: transformation, the transformation to compose with the current world
      transform
    name: transformation
  related:
  - modelTransformation
  - transformation
  - pushTransformation
  - translate
  - scale
  - rotate
  syntax: composeTransformation( transformation );
#---------------------------------

#---------------------------------
# modelTransformation()
#---------------------------------          
- category: function
  description: When called with no arguments, returns a `transformation` containing
    current world transformation. When called with a `transformation` argument, sets
    the current world transformation to the given transformation.
  group: Advanced Transform
  id: modelTransformation
  name: modelTransformation()
  parameters:
  - description: transformation, the transformation to set as the current world transform
    name: transformation
  related:
  - transformation
  - pushTransformation
  - popTransformation
  returns: The current model transformation when called with no arguments
  syntax: |
    modelTransformation();
    modelTransformation( transformation );
#---------------------------------


#---------------------------------
# colour()
#---------------------------------        
- category: type
  description: This type represents a colour with transparency information. You can
    provide this type as arguments to the style functions `fill()`, `tint()`,
    `stroke()`, and `background()`.
  examples:
  - example: |
      --Fill with red
      c = colour( 255, 0, 0 );
      fill( c );
  group: Style
  id: colour
  name: colour
  parameters:
  - description: int, the red component of this colour from `0` to `255`
    name: r
  - description: int, the green component of this colour from `0` to `255`
    name: g
  - description: int, the blue component of this colour from `0` to `255`
    name: b
  - description: int, the alpha component of this colour from `0` to `255`
    name: a
  - description: a string specification of the colour, a wide variety
      of possible specifications are available, including SVG and X11 names
    name: s
  related:
  - fill
  - stroke
  - tint
  - background
  syntax: |
    colour.r
    colour.g
    colour.b
    colour.a
    myColour = colour( 255, 0, 0, 255 ); //red
    myColour = colour( "#ff0000" ); //red
    myColour = colour( "#f00" ); //red
    myColour = colour( "#f" ); //white
    myColour = colour( "rgb(255,0,0)"); //red
    myColour = colour( "rgba(255,0,0,255)"); //red
    myColour = colour( "Red"); //red
    myColour = colour( "Red4"); //dark red
#---------------------------------

#---------------------------------
# colour.blend()
#---------------------------------        
- category: method
  description: This method computes a colour by blending two `colour` types.
    Colours are blended based on the first colour's alpha value. The blend amount
    is determined by the alpha value of the colour invoking this method.
  group: Style
  id: colour.blend
  name: colour.blend( c )
  parameters:
  - description: colour, compute the blending between this colour and c
    name: c
  related:
  - colour
  - colour.mix
  returns: Colour computed by blending this `colour` and `c`
  syntax: |
    c1 = colour( 0, 0, 0, 128 )
    c2 = colour( 255, 255, 255, 255 )
    c3 = c1.blend( c2 )
#---------------------------------

#---------------------------------
# colour.mix()
#---------------------------------        
- category: method
  description: This method computes a colour by mixing two `colour` types linearly.
    Colours are blended based on the specified mix value, `amount`. A value
    of 0.5 for `amount` will generate a colour that is half way between the
    two input colours.
  group: Style
  id: colour.mix
  name: colour.mix( c, amount )
  parameters:
  - description: colour, compute the mixing between this colour and c
    name: c
  - description: scalar, amount of contribution from either colour. A value of 0.0
      will result in the starting colour, and 1.0 will result in the destination
      colour.
    name: amount
  related:
  - colour
  - colour.blend
  returns: Colour computed by mixing this `colour` and `c` by `amount`
  syntax: |
    c1 = colour( 255, 0, 0, 255 );
    c2 = colour( 0, 255, 0, 255 );
    c3 = c1.mix( c2, 0.5 );
#---------------------------------

#---------------------------------
# blendMode()
#---------------------------------
- category: function
  description: Sets the blend mode for all further drawing. The blend mode decides how new drawing operations are blended with underlying pixels.  See the [MDN article on blendmodes](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation) for details.
  group: Style
  id: blendMode
  name: blendMode( MODE )
  parameters:
  - description: >
      one of:


      `sourceOver`: 


      `sourceIn`
 

      `sourceOut`
 

      `sourceAtop`
 

      `destinationOver`
 

      `destinationIn`
 

      `destinationOut`
 

      `destinationAtop`
 

      `lighter`
 

      `copy`
 

      `xor`
 

      `multiply`
 

      `screen`
 

      `overlay`
 

      `darken`
 

      `lighten`
 

      `colourDodge`
 

      `colourBurn`
 

      `hardLight`
 

      `softLight`
 

      `difference`
 

      `exclusion`
 

      `hue`
 

      `saturation`
 

      `colour`
 

      `luminosity`
 
    name: mode
#---------------------------------


#---------------------------------
# ellipseMode()
#---------------------------------        
- category: function
  description: Sets the origin of the ellipses and circles drawn with
    the `ellipse()` and `circle()` functions.
    The default is `ellipseMode( CENTER )`.
  group: Style
  id: ellipseMode
  name: ellipseMode( MODE )
  parameters:
  - description: >
      either `CENTER`, `RADIUS`, `CORNER` or `CORNERS`
    

      `CENTER`: x, y specifies the center of the ellipse, w, h specify its x and y diameters.
      

      `RADIUS`: x, y specifies the center of the ellipse, w, h specify its x and y radii.
      

      `CORNER`: x, y specifies the lower left corner of the ellipse, w, h specify the size its x and y diameters.
      

      `CORNERS`: x, y sets the lower left   coordinate of the ellipse's bounding box. w, h sets the upper right coordinate of the ellipse's bounding box.
    name: mode
  related:
  - ellipse
  - circle
  returns: The current ellipse mode if called without arguments. Returns nothing
    if called with arguments.
  syntax: |
    ellipseMode();
    ellipseMode(CENTER|RADIUS|CORNER|CORNERS);
#---------------------------------

#---------------------------------
# rectMode()
#---------------------------------        
- category: function
  description: Sets the origin of the rectangles drawn with the `rect()` function.
    The default is `rectMode( CORNER )`.
  group: Style
  id: rectMode
  name: rectMode( MODE )
  parameters:
  - description: >
      either `CENTER`, `RADIUS`, `CORNER` or `CORNERS`
    

      `CENTER`: x, y specifies the center of the rectangle, w, h specifies the rectangle's width
      and height.
      

      `RADIUS`: x, y specifies the center of the rectangle,
      w, h specifies half the rectangle's width and height.
      

      `CORNER`: x, y specifies the lower left corner of the rectangle, w and h specify the rectangle's
      width and height.
      

      `CORNERS`: x, y sets the lower left coordinate
      of the rectangle's bounding box. w, h sets the upper right coordinate of the
      rectangle's bounding box.
    name: mode
  related:
  - rect
  returns: The current rect mode if called without arguments. Returns nothing if
    called with arguments.
  syntax: |
    rectMode()
    rectMode(CENTER|RADIUS|CORNER|CORNERS)
#---------------------------------

#---------------------------------
# arcMode()
#---------------------------------
- category: function
  description: Sets how the final angle is interpreted in the `arc()`
    function.
  group: Style
  id: arcMode
  name: arcMode( MODE )
  parameters:
  - description: >
      either `ABSOLUTE` or `RELATIVE`

      `ABSOLUTE`: the `endAngle` is the final angle of the arc

      `RELATIVE`: the `endAngle` is the angle swept out by the arc
    name: mode
  relative:
  - arc
  returns: The current arc mode if called without arguments.  Returns
    nothing if called with arguments.
  syntax: |
    arcMode();
    arcMode(ABSOLUTE|RELATIVE);
#---------------------------------

#---------------------------------
# bezierMode()
#---------------------------------
- category: function
  description: Sets how the control points are interpreted in the `bezier()`
    function.
  group: Style
  id: bezierMode
  name: bezierMode( MODE )
  parameters:
  - description: >
      either `ABSOLUTE` or `RELATIVE`

      `ABSOLUTE`: the control points are the actual points

      `RELATIVE`: the control points are relative to their respective
         endpoints
    name: mode
  relative:
  - bezier
  returns: The current bezier mode if called without arguments.  Returns
    nothing if called with arguments.
  syntax: |
    bezierMode();
    bezierMode(ABSOLUTE|RELATIVE);
#---------------------------------

#---------------------------------
# textMode()
#---------------------------------        
- category: function
  description: Sets the origin of text drawn with the `text()` function. The
    default is `textMode( CENTER )`.
  group: Style
  id: textMode
  name: textMode( MODE )
  parameters:
  - description: >
      either `CENTER` or `CORNER`
    

      `CENTER`: x, y specifies
      the center of the text.
      

      `CORNER`: x, y specifies the lower left
      corner of the text.
    name: mode
  related:
  - text
  returns: The current text mode if called without arguments. Returns nothing if
    called with arguments.
  syntax: |
    textMode()
    textMode( CENTER|CORNER )
#---------------------------------

#---------------------------------
# lineCapMode()
#---------------------------------        
- category: function
  description: Sets the style of the line caps drawn with the `line()` function.
    The default is `lineCapMode( ROUND )`. Note that `lineCapMode()` only
    has an effect if `smooth()` is set.
  examples:
  - example: |
      background(40, 40, 50)
      smooth()
      stroke(255)
      strokeWidth(15)

      translate(WIDTH/2, HEIGHT/2)

      lineCapMode(ROUND)
      line(-30, -30, -30, 30)
      lineCapMode(SQUARE)
      line(0, -30, 0, 30)
      lineCapMode(PROJECT)
      line(30, -30, 30, 30)
    image: media/lineCapMode_ex1.png
  group: Style
  id: lineCapMode
  name: lineCapMode( MODE )
  parameters:
  - description: >
      either `ROUND`, `SQUARE` or `PROJECT`
  

      `ROUND`: line ends
      are rounded with circles
  

      `SQUARE`: line ends are squared off
      at the end points
      

      `PROJECT`: line ends are squared off, but
      project out as far as if they were rounded
    name: mode
  related:
  - line
  - stroke
  - strokeWidth
  returns: The current line cap mode if called without arguments. Returns nothing
    if called with arguments.
  syntax: |
    lineCapMode()
    lineCapMode( ROUND | SQUARE | PROJECT )
#---------------------------------

#---------------------------------
# fill()
#---------------------------------       
- category: function
  description: Sets the colour used to fill shapes drawn with the `ellipse()`
    and `rect()` functions. Also sets the colour of text drawn with the `text()`
    function.
  group: Style
  id: fill
  name: fill( red, green, blue, alpha )
  parameters:
  - description: int from `0` to `255`, specifies value between white and black
    name: gray
  - description: int from `0` to `255`, specifies opacity of the fill
    name: alpha
  - description: int from `0` to `255`, specifies red amount of the fill
    name: red
  - description: int from `0` to `255`, specifies green amount of the fill
    name: green
  - description: int from `0` to `255`, specifies blue amount of the fill
    name: blue
  - description: a value of the colour datatype
    name: colour
  related:
  - noFill
  - stroke
  - colour
  returns: Four values (r,g,b,a) representing the current fill colour if called without
    arguments. Returns nothing if called with arguments.
  syntax: |
    fill()
    fill( gray )
    fill( gray, alpha )
    fill( red, green, blue )
    fill( red, green, blue, alpha )
    fill( colour )
#---------------------------------

#---------------------------------
# noFill()
#---------------------------------       
- category: function
  description: Sets the colour of the fill to completely transparent.
  group: Style
  id: noFill
  name: noFill()
  related:
  - fill
  - noStroke
  syntax: noFill()
#---------------------------------


#---------------------------------
# stroke()
#---------------------------------     
- category: function
  description: Sets the colour used to outline the shapes drawn with the `ellipse()`
    and `rect()` functions. Also sets the colour of lines drawn with the `line()`
    function.
  group: Style
  id: stroke
  name: stroke( red, green, blue, alpha )
  parameters:
  - description: int from `0` to `255`, specifies value between white and black
    name: gray
  - description: int from `0` to `255`, specifies opacity of the stroke
    name: alpha
  - description: int from `0` to `255`, specifies red amount of the stroke
    name: red
  - description: int from `0` to `255`, specifies green amount of the stroke
    name: green
  - description: int from `0` to `255`, specifies blue amount of the stroke
    name: blue
  - description: a value of the colour datatype
    name: colour
  related:
  - strokeWidth
  - noStroke
  - fill
  returns: Four values (r,g,b,a) representing the current stroke colour if called
    without arguments. Returns nothing if called with arguments.
  syntax: |
    stroke()
    stroke( gray )
    stroke( gray, alpha )
    stroke( red, green, blue )
    stroke( red, green, blue, alpha )
    stroke( colour )
#---------------------------------

#---------------------------------
# strokeWidth()
#---------------------------------       
- category: function
  description: Sets the width of the outline of shapes drawn with the `ellipse()`
    and `rect()` functions. Also sets the width of lines drawn with the `line()`
    function.
  group: Style
  id: strokeWidth
  name: strokeWidth( width )
  parameters:
  - description: int or float, the width in pixels of the stroke
    name: width
  related:
  - stroke
  - noStroke
  returns: The current stroke width if called without arguments. Returns nothing
    if called with arguments.
  syntax: |
    strokeWidth()
    strokeWidth( width )
#---------------------------------

#---------------------------------
# noStroke()
#---------------------------------       
- category: function
  description: Sets the stroke width to zero.
  group: Style
  id: noStroke
  name: noStroke()
  related:
  - stroke
  - strokeWidth
  syntax: noStroke()
#---------------------------------


#---------------------------------
# font()
#---------------------------------     
- category: function
  description: This sets the current font to the font specified by `name`.
    If no argument is given `font()` returns the current font. The default
    font is "Helvetica".
  group: Style
  id: font
  name: font( name )
  parameters:
  - description: |
      string, the name of the font to use. A list of available fonts can be found
      by tapping on the `font()` function in the code editor.
    name: name
  related:
  - text
  - fontSize
  returns: The current font if called without arguments. Returns nothing if called
    with arguments.
  syntax: |
    font()
    font( name )
#---------------------------------

#---------------------------------
# fontSize()
#---------------------------------      
- category: function
  description: This sets the current font size to the size specified by `size`.
    If no argument is given `fontSize()` returns the current font size. The
    default font size is 17 points.
  group: Style
  id: fontSize
  name: fontSize( size )
  parameters:
  - description: float, the size of the font (in points). Must be greater than 0.0.
    name: size
  related:
  - text
  - font
  returns: The current font size if called without arguments. Returns nothing if
    called with arguments.
  syntax: |
    fontSize()
    fontSize( size )
#---------------------------------


#---------------------------------
# textAlign()
#---------------------------------    
- category: function
  description: This sets the horizontal alignment of text rendered with the `text()` function.
    This is generally used in conjunction with `textWrapWidth()` to produce
    multi-line, word-wrapped text aligned to the LEFT, CENTER or RIGHT. If called
    without arguments this function returns the current text alignment. The default
    text alignment is `textAlign( LEFT )`.
  group: Style
  id: textAlign
  name: textAlign( ALIGN )
  parameters:
  - description: Can be `LEFT`, `CENTER` or `RIGHT`
    name: ALIGN
  related:
  - text
  - textWrapWidth
  returns: The current text alignment if called without arguments. Returns nothing
    if called with arguments.
  syntax: |
    textAlign()
    textAlign( LEFT|CENTER|RIGHT )
#---------------------------------

#---------------------------------
# textValign()
#---------------------------------    
- category: function
  description: This sets the vertical alignment of text rendered with the `text()` function.
    If called without arguments this function returns the current text alignment. The default text alignment is `textValign( BASELINE )`.
  group: Style
  id: textValign
  name: textValign( ALIGN )
  parameters:
  - description: Can be `BOTTOM`, `BASELINE`, `CENTRE`, or `TOP`
    name: ALIGN
  related:
  - text
  - textAlign
  returns: The current vertical text alignment if called without arguments. Returns nothing
    if called with arguments.
  syntax: |
    textValign()
    textValign( BOTTOM|BASELINE|CENTRE|TOP )
#---------------------------------


#---------------------------------
# textSize()
#---------------------------------      
- category: function
  description: >
    This function returns the width of the specified string
    when rendered with the current font size and style. You can use this to, for example,
    render a button behind a piece of text, position text within a speech bubble,
    and so on.
  examples:
  - example: |
      background(100, 120, 160);
      font("Georgia");
      fontSize(20);
      textWrapWidth(70);

      // Get the width of our string
      w = textSize("Hello World!");

      // Draw a box behind our text
      fill(120,0,40);
      strokeWidth(2);
      rectMode(CENTER);
      rect(WIDTH/2,HEIGHT/2,w+15,h+15);
      
      fill(255);
      text("Hello World!",WIDTH/2,HEIGHT/2);
    image: media/textSize_ex1.png
  group: Text Metrics
  id: textSize
  name: textSize( string )
  parameters:
  - description: string, the string to measure
    name: string
  related:
  - text
  returns: width and height of the text string when rendered with the current font
    size and style.
  syntax: |
    width = textSize( string )
    width, height = textSize( string )
#---------------------------------

#---------------------------------
# pushTransformation()
#---------------------------------      
- category: function
  description: >
    The `pushTransformation()` function saves any transformations that
    have been made and pushes a copy of them onto the top of the stack. You can
    then perform further transforms (translations, rotations and scales), perform
    drawing operations, and return to the previous transformation by calling `popTransformation()`.
    You can nest calls to `pushTransformation()` and `popTransformation()` for more complex
    object placement.
  

    The following transform calls are preserved when
    using `pushTransformation()` and `popTransformation()`: translate(), rotate(), scale()
  group: Transform Management
  id: pushTransformation
  name: pushTransformation()
  related:
  - popTransformation
  - resetTransformation
  - translate
  - rotate
  - scale
  syntax: pushTransformation()
#---------------------------------

#---------------------------------
# popTransformation()
#---------------------------------       
- category: function
  description: >
    The `popTransformation()` function saves any transformations that
    have been made and pushes a copy of them onto the top of the stack. You can
    then perform further transforms (translations, rotations and scales), perform
    drawing operations, and return to the previous transformation by calling `popTransformation()`.
    You can nest calls to `pushTransformation()` and `popTransformation()` for more complex
    object placement.
  

    The following transform calls are preserved when
    using `pushTransformation()` and `popTransformation()`: translate(), rotate(), scale()
  group: Transform Management
  id: popTransformation
  name: popTransformation()
  related:
  - pushTransformation
  - resetTransformation
  - translate
  - rotate
  - scale
  syntax: popTransformation()
#---------------------------------

#---------------------------------
# resetTransformation()
#--------------------------------- 
- category: function
  description: This function resets all transformation. It replaces the current
    transform transformation with the identity transformation. This effectively repositions all
    drawing at 0, 0, with no rotation and scaling.
  group: Transform Management
  id: resetTransformation
  name: resetTransformation()
  related:
  - pushTransformation
  - popTransformation
  - translate
  - rotate
  - scale
  syntax: resetTransformation()
#---------------------------------

#---------------------------------
# pushStyle()
#---------------------------------     
- category: function
  description: >
    The `pushStyle()` function saves the current graphics style
    and pushes a copy of the current style onto the top of the stack. You can then
    modify the style, perform drawing operations, and return to the previous style
    by calling `popStyle()`. You can nest calls to `pushStyle()` and `popStyle()`
    in order to provide more control.
  

    Styles set with the following functions
    are preserved when using `pushStyle()` and `popStyle()`: fill(), noFill(),
    stroke(), noStroke(), tint(), noTint(), strokeWidth(), lineCapMode(), ellipseMode(),
    rectMode(), spriteMode(), smooth(), noSmooth(), font(), fontSize(), textAlign(),
    textMode() and textWrapWidth()
  group: Style Management
  id: pushStyle
  name: pushStyle()
  related:
  - popStyle
  - resetStyle
  syntax: pushStyle()
#---------------------------------

#---------------------------------
# popStyle()
#---------------------------------     
- category: function
  description: >
    The `pushStyle()` function saves the current graphics style
    and pushes a copy of the current style onto the top of the stack. You can then
    modify the style, perform drawing operations, and return to the previous style
    by calling `popStyle()`. You can nest calls to `pushStyle()` and `popStyle()`
    in order to provide more control.
  

    Styles set with the following functions
    are preserved when using `pushStyle()` and `popStyle()`: fill(), noFill(),
    stroke(), noStroke(), tint(), noTint(), strokeWidth(), lineCapMode(), ellipseMode(),
    rectMode(), spriteMode(), smooth(), noSmooth()
  group: Style Management
  id: popStyle
  name: popStyle()
  related:
  - pushStyle
  - resetStyle
  syntax: popStyle()
#---------------------------------

#---------------------------------
# resetStyle()
#---------------------------------     
- category: function
  description: >
    Calling `resetStyle()` will reset all style parameters to
    their default values. This will effect whatever style is currently on the top
    of the stack.
  

    Styles set with the following functions are reset when
    using `resetStyle()`: fill(), noFill(), stroke(), noStroke(), tint(), noTint(),
    strokeWidth(), lineCapMode(), ellipseMode(), rectMode(), spriteMode(), smooth(),
    noSmooth()
  group: Style Management
  id: resetStyle
  name: resetStyle()
  related:
  - pushStyle
  - popStyle
  syntax: resetStyle()
#---------------------------------

#---------------------------------
# WIDTH
#---------------------------------     
- category: const
  description: This constant is set to the width of the screen in pixels.
  group: Constants
  id: WIDTH
  name: WIDTH
  related:
  - HEIGHT
  returns: Width of the screen in pixels
  syntax: WIDTH
#---------------------------------

#---------------------------------
# HEIGHT
#---------------------------------     
- category: const
  description: This constant is set to the height of the screen in pixels.
  group: Constants
  id: HEIGHT
  name: HEIGHT
  related:
  - WIDTH
  returns: Height of the screen in pixels
  syntax: HEIGHT
#---------------------------------

#---------------------------------
# ElapsedTime
#---------------------------------     
- category: const
  description: Query this variable to get the current elapsed time, in seconds,
    while running your project.
  group: Variables
  id: ElapsedTime
  name: ElapsedTime
  related:
  - DeltaTime
  returns: Time in seconds since the start of running the project
  syntax: ElapsedTime
#---------------------------------

#---------------------------------
# DeltaTime
#---------------------------------     
- category: const
  description: Query this variable to get the time elapsed, in seconds, since the
    last draw call while running your project.
  group: Variables
  id: DeltaTime
  name: DeltaTime
  related:
  - ElapsedTime
  returns: Time in seconds since the start of the previous frame
  syntax: DeltaTime
#---------------------------------

