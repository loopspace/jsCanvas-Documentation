id: parameters
name: Parameters
subtitle: Creating Parameters to Control Your Projects
ordering:
    - Overview
    - Creating Parameters
    - Watching Expressions
    - Printing
    - Clearing the Parameter and Output List
functions:

#---------------------------------
# Parameter Overview
#---------------------------------
- id: parameterOverview
  category: overview
  description: |
    Parameters are ways to elicit information from the user.  A
    parameter defines a widget in the parameters panel (on the left of
    the browser window) which the user can interact with at any time
    during the execution of the script.  The parameter functions all
    have a similar syntax:
    
        parameter.type("Some text","name",...,callback)

    This displays an appropriate widget in the parameters panel
    according to the type with title text `Some text`.  There is a
    special object called `parameters` which holds the current values
    of the various defined parameters, and this one is referenced by
    `name`.  So in your code, you can use `parameters.name` to get the
    current value.

    The `callback` is a function which is called whenever the
    parameter is changed by the user.  It takes one argument which is
    the new value of the parameter.
    
  group: Overview
  name: Overview of Parameters
#---------------------------------

#---------------------------------
# parameter.number
#--------------------------------- 
- category: function
  description: >
    This function creates a visual slider in the viewer that can be
    used to adjust a global variable in your code.
    

    You generally call
    the `parameter.number()` function in the `setup()` function of your **main**
    file. The string you specify for `name` will be added to the
    `parameters` table
    that can be used in your code. When you adjust the slider in the viewer, the
    variable will be set appropriately. The three parameters, `min`, `max`,
    and `step` allow you to set the minimum, maximum, and step value of
    your parameter respectively. If an initial value is not specified, then the
    parameter takes on the minimum value initially. If no minimum or maximum values
    are specified, the parameter uses the range [0, 1] with step value
    0.1.  If the minimum and maximum are specified but the step value
    is not, the step value is taken to be 1.
    
    
    The optional `callback` argument specifies a callback function to be called when the parameter
    slider changes. This callback function is provided the parameter's value as its
    single argument.
  examples:
  - example: |
      function setup()
          //Creates a global variable called Radius
          parameter.number("Radius", "radius", 50, 300, 1, 100);
      end
      
      function draw()
          background(128);
          ellipseMode(RADIUS);
          ellipse(WIDTH/2, HEIGHT/2, parameters.radius);
      end
  group: Creating Parameters
  id: parameter.number
  name: parameter.number( text, name, min, max, step, initial, callback )
  parameters:
  - description: string, the text is displayed above the slider
    name: text
  - description: string, the parameter function will create a key in
          the `parameters` table to hold the value
    name: name
  - description: int or float, specifies the minimum value that your parameter can
      take
    name: min
  - description: int or float, specifies the maximum value that your parameter can
      take
    name: max
  - description: int or float, specifies the step value for the slider
    name: slider
  - description: int or float, specifies the initial, or starting, value of the
      parameter
    name: initial
  - description: function, this function will be called whenever the parameter is changed,
      it will be given the parameter value as an argument
    name: callback
  related:
  - parameter.text
  - parameter.colour
  - parameter.bool
  - parameter.action
  - parameter.clear
  syntax: |
    parameter.number( text, name )
    parameter.number( text, name, min, max )
    parameter.number( text, name, min, max, step )
    parameter.number( text, name, min, max, step, initial )
    parameter.number( text, name, min, max, step, initial, callback )
#---------------------------------
     

#---------------------------------
# parameter.colour
#--------------------------------- 
- category: function
  description: >
    This function creates a visual colour sample in the viewer that can be
    used to adjust a colour variable in the `parameters` object in your code.
    

    You generally call
    the `parameter.colour()` function in the `setup()` function of your **main**
    file. The string you specify for `name` will be added to the
    `parameters` table as a colour type.

    
    This can be used in your code. When you tap the colour sample in the viewer, an interactive 
    colour picker will be presented, allowing you to adjust the variable live, while your code
    is running. 
    
    
    You may also set the initial value of the colour with a colour object.
    
    The optional `callback` argument specifies a callback function to be called when the colour value changes. 
    This callback function is provided a single argument, of the colour type, containing the
    new value.

    Note that this uses the HTML5 colour picker.  In some browsers,
    there is no obvious `Select` button and the picker should be
    dismissed by clicking the `X` button on its window.


  examples:
  - example: |
      function setup() {
          // Creates a colour parameter variable called fillcolour
          // make it red by default
          parameter.colour("Fill Colour", 'fillcolour', new Colour('red'));
          
          // Creates a global colour parameter variable called strokecolour
          // make it white by default
          parameter.colour("Stroke Colour", 'strokecolour', new Colour('white'));
      }
      
      function draw() {
          background(128);

          strokeWidth(10);
          
          --Set our colours using the parameter values
          stroke(parameters.strokecolour);
          fill(parameters.fillcolour);

          ellipse(WIDTH/2, HEIGHT/2, 300);
      }
  group: Creating Parameters
  id: parameter.colour
  name: parameter.colour( text, name, colour, callback )
  parameters:
  - description: string, the text displayed by the colour picker
    name: text
  - description: string, the parameter function will create a colour variable with
      this name in the parameters object
    name: name
  - description: colour, specifies the initial colour
    name: colour
  - description: function, this function will be called whenever the parameter is changed,
      it will be given the new colour value as an argument
    name: callback
  related:
  - colour
  - parameter.text
  - parameter.number
  - parameter.bool
  - parameter.action
  - parameter.clear
  syntax: |
    parameter.colour( text, name )
    parameter.colour( text, name, colour )
    parameter.colour( text, name, colour, callback )
#---------------------------------

#---------------------------------
# parameter.clear
#---------------------------------         
- category: function
  description: This function clears the parameter list of all parameter widgets
    and watch values. You can then re-add parameters using the `parameter` group
    of functions.
  group: Clearing the Parameter List
  id: parameter.clear
  name: parameter.clear()
  related:
  - parameter.number
  - parameter.colour
  - parameter.action
  - parameter.bool
  - parameter.watch
  - output.clear
  syntax: parameter.clear()
#---------------------------------
      
#---------------------------------
# parameter.bool
#--------------------------------- 
- category: function
  description: >
    This function creates a visual switch in the viewer that can be
    used to adjust a boolean variable in your code.
    

    You generally call
    the `parameter.bool()` function in the `setup()` function of your **main**
    file. The string you specify for `name` will be exposed as a
    variable in the parameters object
    that can be used in your code. 
    
    
    When you adjust the switch in the viewer, the
    variable will be set appropriately. You may also specify an `initial` value for the
    switch. With `true` causing the switch to be set to the **ON** state, and `false` setting
    the switch to the **OFF** state.
    
    
    The optional `callback` argument specifies a callback function to be called when the parameter
    switch changes. This callback function is provided the parameter's value as its
    single argument.    
  examples:
  - example: |
      function setup() {
          // Creates a simple switch that prints when changed
          parameter.bool("My Switch", "myswitch", true, switchChanged);
      end
      
      function switchChanged( value ) {
          print( "My Switch changed to " + value );
      }
  group: Creating Parameters
  id: parameter.bool
  name: parameter.bool( text, name, initial, callback )
  parameters:
  - description: string, the text shown in the parameter pane
    name: text
  - description: string, the parameter function will create a variable with
      this name in the parameters object
    name: name
  - description: boolean, specifies the initial value of the boolean parameter
    name: initial
  - description: function, this function will be called whenever the parameter is changed,
      it will be given the parameter value as an argument
    name: callback
  related:
  - parameter.text
  - parameter.colour
  - parameter.number
  - parameter.action
  - parameter.clear
  syntax: |
    parameter.bool( text, name )
    parameter.bool( text, name, initial )
    parameter.bool( text, name, initial, callback )
#--------------------------------- 

#---------------------------------
# parameter.text
#--------------------------------- 
- category: function
  description: >
    This function creates a visual text box in the viewer. You can type in this
    control to adjust the contents of the corresponding string value
    in the parameters object defined by `name`.
    

    You generally call
    the `parameter.text()` function in the `setup()` function of your **main**
    file. The string you specify for `name` will be exposed as a value
    in the parameters object
    that can be used in your code. 
    
    
    When you input text in the parameter.text control, the
    variable defined by `name` will be set appropriately. You may also specify the initial contents
    of the text variable by setting `initial` to a string.
    
    
    The optional `callback` argument specifies a callback function to be called when the parameter
    text changes. This callback function is provided the parameter's value as its
    single argument.    
  examples:
  - example: |
      function setup() {
          // Creates a simple switch that prints when changed
          parameter.text("Write some text", "mytext", "Hello World!", textChanged);
      }
      
      // Print our text parameter in upper-case
      function textChanged( value ) {
          print( string.upper(value) )
      }
  group: Creating Parameters
  id: parameter.text
  name: parameter.text( text, name, initial )
  parameters:
  - description: string, the text to display above the input field
    name: text
  - description: string, the parameter function will create a variable with
      this key in the parameters object
    name: name
  - description: string, specifies the initial value of the text parameter
    name: initial
  - description: function, this function will be called whenever the parameter is changed,
      it will be given the parameter value as an argument
    name: callback
  related:
  - parameter.bool
  - parameter.colour
  - parameter.number
  - parameter.action
  - parameter.clear
  syntax: |
    parameter.text( text, name )
    parameter.text( text, name, initial )
    parameter.text( text, name, initial, callback )
#---------------------------------  

#---------------------------------
# parameter.action
#--------------------------------- 
- category: function
  description: >
    This function creates a visual button in the viewer sidebar. Pressing the button
    will call the function defined by `callback`. The `name` argument sets the label
    of the button.
    

    You generally call
    the `parameter.action()` function in the `setup()` function of your **main**
    file. The string you specify for `name` will be used to label the button that
    appears in the viewer. It will not be exposed as a variable.
    
    
    The `callback` argument specifies a callback function to be called when the
    button is pressed. It is passed the `name` of the button as its only argument.
  examples:
  - example: |
      function setup() {
          // Creates a button to clear the output
          parameter.action("Clear Output", output.clear);
      }
  group: Creating Parameters
  id: parameter.action
  name: parameter.action( name, callback )
  parameters:
  - description: string, the parameter function will create a global variable with
      this name
    name: name
  - description: function, this function will be called whenever the parameter is changed,
      it will be given the parameter value as an argument
    name: callback
  related:
  - parameter.bool
  - parameter.colour
  - parameter.number
  - parameter.text
  - parameter.clear
  syntax: |
    parameter.action( name, callback )    
#---------------------------------            
      
#---------------------------------
# parameter.watch
#---------------------------------       
- category: function
  description: This function allows you to monitor the return value of
    a javascript function
    within the viewer. Generally you call the `parameter.watch()` function from the `setup()`
    function in your **main** file.
  examples:
  - example: |
      function setup() {
          // Shows the elapsed time in the viewer
          parameter.watch("Elapsed Time",function() {return ElapsedTime;});
      }
  group: Watching Expressions
  id: parameter.watch
  name: parameter.watch( text, function )
  parameters:
  - description: string, the title shown above the output
    name: text
  - description: function, the function whose return value to show
    name: function
  related:
  - parameter.clear
  syntax: parameter.watch( text, function )
#---------------------------------
  
#---------------------------------
# print
#---------------------------------       
- category: function
  description: This function prints a string (or something that can be
     converted to a string) to the output buffer.
  group: Printing
  id: print()
  name: print()
  parameters:
  - description: string, the text to print
    name: text
  syntax: print(text)
#---------------------------------

#---------------------------------
# output.clear
#---------------------------------       
- category: function
  description: This function clears the output buffer for the `print()`
    function.
  group: Clearing the Parameter List
  id: output.clear
  name: output.clear()
  syntax: output.clear()
#---------------------------------
